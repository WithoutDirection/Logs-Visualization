# Generated by Django 5.2.7 on 2025-10-08 14:59

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('datasets', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Edge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('edge_key', models.IntegerField(default=0)),
                ('operation', models.CharField(db_index=True, max_length=100)),
                ('timestamp', models.BigIntegerField(db_index=True)),
                ('entry_index', models.IntegerField(db_index=True)),
                ('line_id', models.CharField(blank=True, db_index=True, max_length=50)),
                ('technique', models.CharField(blank=True, max_length=200)),
                ('result', models.CharField(blank=True, max_length=50)),
                ('attributes', models.JSONField(blank=True, default=dict)),
                ('graph', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='edges', to='datasets.graph')),
            ],
            options={
                'db_table': 'edges',
            },
        ),
        migrations.CreateModel(
            name='EdgeMetadata',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('src_process', models.CharField(blank=True, max_length=255)),
                ('src_pid', models.IntegerField(blank=True, null=True)),
                ('dst_resource', models.TextField(blank=True)),
                ('dst_type', models.CharField(blank=True, max_length=50)),
                ('original_event', models.JSONField(blank=True, default=dict)),
                ('edge', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='metadata', to='graphs.edge')),
            ],
            options={
                'db_table': 'edge_metadata',
            },
        ),
        migrations.CreateModel(
            name='Node',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('node_id', models.CharField(db_index=True, max_length=255)),
                ('type', models.CharField(choices=[('process', 'Process'), ('file', 'File'), ('registry', 'Registry'), ('network', 'Network')], db_index=True, max_length=20)),
                ('name', models.CharField(max_length=500)),
                ('pid', models.IntegerField(blank=True, db_index=True, null=True)),
                ('resource_key', models.TextField(blank=True, default='')),
                ('original_uuid', models.CharField(blank=True, max_length=100)),
                ('attributes', models.JSONField(blank=True, default=dict)),
                ('graph', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='nodes', to='datasets.graph')),
            ],
            options={
                'db_table': 'nodes',
            },
        ),
        migrations.AddField(
            model_name='edge',
            name='dst',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incoming_edges', to='graphs.node'),
        ),
        migrations.AddField(
            model_name='edge',
            name='src',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outgoing_edges', to='graphs.node'),
        ),
        migrations.CreateModel(
            name='ReaprAnnotation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(choices=[('root_cause', 'Root Cause'), ('malicious', 'Malicious'), ('contaminated', 'Contaminated'), ('impact', 'Impact'), ('benign', 'Benign')], db_index=True, max_length=20)),
                ('source', models.CharField(blank=True, max_length=100)),
                ('is_attack_path', models.BooleanField(default=False)),
                ('malicious_operations', models.JSONField(blank=True, default=list)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('edge', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reapr_annotations', to='graphs.edge')),
                ('graph', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reapr_annotations', to='datasets.graph')),
                ('node', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reapr_annotations', to='graphs.node')),
            ],
            options={
                'db_table': 'reapr_annotations',
            },
        ),
        migrations.CreateModel(
            name='SequenceGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pattern_name', models.CharField(db_index=True, max_length=100)),
                ('pattern_color', models.CharField(max_length=7)),
                ('pattern_description', models.TextField()),
                ('confidence', models.FloatField(db_index=True)),
                ('completeness', models.FloatField(default=0.0)),
                ('pattern_coverage', models.FloatField(default=0.0)),
                ('target_src', models.CharField(max_length=255)),
                ('target_dst', models.CharField(max_length=255)),
                ('matched_operations', models.JSONField(default=list)),
                ('edge_ids', models.JSONField(default=list)),
                ('start_index', models.IntegerField()),
                ('end_index', models.IntegerField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('graph', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sequence_groups', to='datasets.graph')),
            ],
            options={
                'db_table': 'sequence_groups',
            },
        ),
        migrations.AddIndex(
            model_name='node',
            index=models.Index(fields=['graph', 'type'], name='nodes_graph_i_7d62dc_idx'),
        ),
        migrations.AddIndex(
            model_name='node',
            index=models.Index(fields=['graph', 'pid'], name='nodes_graph_i_f16fd1_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='node',
            unique_together={('graph', 'node_id')},
        ),
        migrations.AddIndex(
            model_name='edge',
            index=models.Index(fields=['graph', 'operation'], name='edges_graph_i_26244c_idx'),
        ),
        migrations.AddIndex(
            model_name='edge',
            index=models.Index(fields=['graph', 'timestamp'], name='edges_graph_i_963d08_idx'),
        ),
        migrations.AddIndex(
            model_name='edge',
            index=models.Index(fields=['graph', 'entry_index'], name='edges_graph_i_8a9588_idx'),
        ),
        migrations.AddIndex(
            model_name='edge',
            index=models.Index(fields=['graph', 'src', 'dst'], name='edges_graph_i_d558c8_idx'),
        ),
        migrations.AddIndex(
            model_name='reaprannotation',
            index=models.Index(fields=['graph', 'label'], name='reapr_annot_graph_i_8b5793_idx'),
        ),
        migrations.AddIndex(
            model_name='reaprannotation',
            index=models.Index(fields=['node'], name='reapr_annot_node_id_e094ee_idx'),
        ),
        migrations.AddIndex(
            model_name='reaprannotation',
            index=models.Index(fields=['edge'], name='reapr_annot_edge_id_31fae8_idx'),
        ),
        migrations.AddIndex(
            model_name='sequencegroup',
            index=models.Index(fields=['graph', 'pattern_name'], name='sequence_gr_graph_i_fc452d_idx'),
        ),
        migrations.AddIndex(
            model_name='sequencegroup',
            index=models.Index(fields=['graph', 'confidence'], name='sequence_gr_graph_i_02c60e_idx'),
        ),
    ]
